{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\game.js\";\nimport React from 'react';\nimport { Tile } from './tile';\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, \"Header Component\", this.state.textCounter);\n    } // constructor(){\n    //     this.state = {\n    //         tiles : ['', '', '', '', '', '', '', '', '' ],\n    //         turn: 0,\n    //         winner:''\n    //     };\n    // }\n    // InitialState()\n    // {\n    //     this.setState({\n    //         tiles : ['', '', '', '', '', '', '', '', '' ],\n    //         turn: 0,\n    //         winner:''\n    //     });\n    // }\n    // render()\n    // {\n    //     return (\n    //         <div className='game'>\n    //             {\n    //                 this.state.tiles.map(function(tile,pos){\n    //                     return (\n    //                         <Tile turn={this.state.turn} pmark={tile} onClickFn={this.playFN} cid={pos}></Tile>\n    //                     );\n    //                 })\n    //             }\n    //             <div className={this.state.winner === ''? 'winstatus' : 'winstatus visible'}>\n    //                 <div>\n    //                     <p>\n    //                        Player {this.state.turn + 1} Won \n    //                     </p>\n    //                     <button onClick={this.restartGame}>Reset</button>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     );\n    // }\n    // playFN(element)\n    // {\n    //     let pos : element.target.id;\n    //     let pTiles = this.state.tiles;\n    //     if(this.state.tiles[pos] === '')\n    //     {\n    //         this.state.tiles[pos] = (this.state.turn).toString();\n    //     }\n    //     //Checkl if the user has made perfect combination\n    //     if(this.check(pTiles[0],pTiles[1],pTiles[2]) ||\n    //     this.check(pTiles[0],pTiles[3],pTiles[6]) ||\n    //     this.check(pTiles[1],pTiles[4],pTiles[7]) ||\n    //     this.check(pTiles[2],pTiles[5],pTiles[8]) ||\n    //     this.check(pTiles[3],pTiles[4],pTiles[5]) ||\n    //     this.check(pTiles[6],pTiles[7],pTiles[8]) ||\n    //     this.check(pTiles[2],pTiles[4],pTiles[6]) ||\n    //     this.check(pTiles[0],pTiles[4],pTiles[9])\n    //     )\n    //     {\n    //         this.setState(\n    //             this.state.turn= this.state.turn,\n    //             this.state.winner = this.state.turn.toString()\n    //             );\n    //     }\n    //     else \n    //     {\n    //         let TurnToPass = 1 - this.state.turn;\n    //         // this.setState({\n    //         //     turn = TurnToPass\n    //         // })\n    //         this.setState(\n    //             this.state.turn= this.state.turn,\n    //             this.state.winner = this.state.turn.toString()\n    //             );\n    //     }\n    // }\n    // check(a,b,c)\n    // {\n    //     return !!(a+b+c).match(/^(000|111)&/gi);\n    // }\n    // restartGame()\n    // {\n    //     this.InitialState();\n    // }\n\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\game.js"],"names":["React","Tile","Game","state","textCounter","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAoB,QAApB;AACA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAEI,kBAAa;AAAA;;AAAA;;AAAA;AAEZ;;AAJL;AAAA;AAAA,6BAMI;AACM,aACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEK,KAAKC,KAAL,CAAWC,WAFhB,CADN;AAML,KAbL,CAcI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9FJ;;AAAA;AAAA,EAA0BJ,KAAK,CAACK,SAAhC","sourcesContent":["import React from 'react'\r\nimport { Tile} from './tile'\r\nexport class Game extends React.Component\r\n{\r\n    constructor(){\r\n\r\n    }\r\n    render()\r\n    {\r\n          return (\r\n                <h1>\r\n                    Header Component\r\n                    {this.state.textCounter}\r\n                </h1>\r\n            );\r\n    }\r\n    // constructor(){\r\n    //     this.state = {\r\n    //         tiles : ['', '', '', '', '', '', '', '', '' ],\r\n    //         turn: 0,\r\n    //         winner:''\r\n    //     };\r\n    // }\r\n    // InitialState()\r\n    // {\r\n    //     this.setState({\r\n    //         tiles : ['', '', '', '', '', '', '', '', '' ],\r\n    //         turn: 0,\r\n    //         winner:''\r\n    //     });\r\n    // }\r\n    // render()\r\n    // {\r\n    //     return (\r\n    //         <div className='game'>\r\n    //             {\r\n    //                 this.state.tiles.map(function(tile,pos){\r\n    //                     return (\r\n    //                         <Tile turn={this.state.turn} pmark={tile} onClickFn={this.playFN} cid={pos}></Tile>\r\n    //                     );\r\n    //                 })\r\n    //             }\r\n    //             <div className={this.state.winner === ''? 'winstatus' : 'winstatus visible'}>\r\n    //                 <div>\r\n    //                     <p>\r\n    //                        Player {this.state.turn + 1} Won \r\n    //                     </p>\r\n    //                     <button onClick={this.restartGame}>Reset</button>\r\n    //                 </div>\r\n    //             </div>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n    // playFN(element)\r\n    // {\r\n    //     let pos : element.target.id;\r\n    //     let pTiles = this.state.tiles;\r\n    //     if(this.state.tiles[pos] === '')\r\n    //     {\r\n    //         this.state.tiles[pos] = (this.state.turn).toString();\r\n    //     }\r\n    //     //Checkl if the user has made perfect combination\r\n    //     if(this.check(pTiles[0],pTiles[1],pTiles[2]) ||\r\n    //     this.check(pTiles[0],pTiles[3],pTiles[6]) ||\r\n    //     this.check(pTiles[1],pTiles[4],pTiles[7]) ||\r\n    //     this.check(pTiles[2],pTiles[5],pTiles[8]) ||\r\n    //     this.check(pTiles[3],pTiles[4],pTiles[5]) ||\r\n    //     this.check(pTiles[6],pTiles[7],pTiles[8]) ||\r\n    //     this.check(pTiles[2],pTiles[4],pTiles[6]) ||\r\n    //     this.check(pTiles[0],pTiles[4],pTiles[9])\r\n    //     )\r\n    //     {\r\n    //         this.setState(\r\n    //             this.state.turn= this.state.turn,\r\n    //             this.state.winner = this.state.turn.toString()\r\n    //             );\r\n    //     }\r\n    //     else \r\n    //     {\r\n    //         let TurnToPass = 1 - this.state.turn;\r\n    //         // this.setState({\r\n    //         //     turn = TurnToPass\r\n    //         // })\r\n    //         this.setState(\r\n    //             this.state.turn= this.state.turn,\r\n    //             this.state.winner = this.state.turn.toString()\r\n    //             );\r\n    //     }\r\n    // }\r\n    // check(a,b,c)\r\n    // {\r\n    //     return !!(a+b+c).match(/^(000|111)&/gi);\r\n    // }\r\n    // restartGame()\r\n    // {\r\n    //     this.InitialState();\r\n    // }\r\n}"]},"metadata":{},"sourceType":"module"}