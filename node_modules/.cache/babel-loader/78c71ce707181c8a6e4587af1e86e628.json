{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\Game.js\";\nimport React from 'react';\nimport { Square, TimeTravel } from './functionalComponents';\nimport { Board } from './board'; // in the main React component class manage the state of the pplication\n\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props)); // STATE\n    // history contains an array of objects, each with a singe property: _squares_\n    // squares is always an array of 9 items, making up the tic-tac-toe grid\n    // xNext is a boolean usedd to toggle between x and o\n    // index is an integer used to keep track of the current turn (and to allow time-traveling between turns)\n\n    _this.declareWinner = function (squares) {\n      /* create an array of all possible winning combinations\r\n          considering the board\r\n                0 1 2\r\n          3 4 5\r\n          6 7 8\r\n      */\n      var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // loop through the array of winning combinations\n\n      for (var i = 0; i < lines.length; i += 1) {\n        // destructure the indexes from the array of winning combinations\n        var _lines$i = _slicedToArray(lines[i], 3),\n            a = _lines$i[0],\n            b = _lines$i[1],\n            c = _lines$i[2]; // if the values in the squares array are the same (and not null) return the winner, else return null\n\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n\n      return null;\n    };\n\n    _this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xNext: true,\n      index: 0\n    };\n    return _this;\n  } // create a function used when cligking clicking one of the squares in the grid\n\n\n  _createClass(Game, [{\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      // retrieve the array of objects from the state, up to the object detailed by the index\n      var history = this.state.history.slice(0, this.state.index + 1); // retrieve the last object\n\n      var current = history[this.state.index]; // create a copy of the array contained in the last object\n\n      var squares = _toConsumableArray(current.squares); // pre-emptively quit the function if a winner can already be declared or the button already matches a non null value\n\n\n      if (this.declareWinner(squares) || squares[i]) {\n        return;\n      } // alter the value of the respective button including an X or O value\n\n\n      squares[i] = this.state.xNext ? 'X' : 'O'; // update the state adding the new array to the history property\n      // toggle xNext to toggle between the two letters\n      // update the index with the length of the now incremented history\n\n      this.setState({\n        history: _toConsumableArray(history).concat([{\n          squares: squares\n        }]),\n        xNext: !this.state.xNext,\n        index: history.length\n      });\n    } // create a function to jump to a specific turn\n\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo(index) {\n      // update the state for the index and for the xNext boolean\n      // if index is even (0, 2, 4...) it means xNext ought to be true (as it is the first, third, fifth... action)\n      // simply updating this state is enough to trigger a re-render of the components using these values, including the board\n      this.setState({\n        index: index,\n        xNext: index % 2 === 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // retrieve the history array and the last item\n      var history = this.state.history;\n      var current = history[this.state.index]; // describe a message based on whether the current array of squares has a winner\n      // detail also a circumstance in which all squares have been played and no winner is present\n\n      var winner = this.declareWinner(current.squares);\n      var status;\n\n      if (winner) {\n        status = \"Winning side: \".concat(winner, \"!\");\n      } else {\n        status = \"Player's turn: \".concat(this.state.xNext ? 'X' : 'O');\n      }\n\n      if (this.state.index === 9 && !winner) {\n        status = 'It\\'s a draw';\n      } // for the time traveling feature\n      // create multiple list items nesting button elements with the jumpTo function\n\n\n      var moves = history.map(function (squares, index) {\n        // for each button include a description based on the index (0 returns false)\n        // detail the jumpTo function with the appropriate index\n        var description = index ? \"Go to move #\".concat(index) : \"Go to game start\";\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.jumpTo(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, description));\n      });\n      /* return the following hieararchy\r\n        <Header/>\r\n        <Status/>\r\n        <BoardComponent/>\r\n        <TimeTravelComponent/>\r\n      */\n\n      return React.createElement(\"div\", {\n        className: \"Game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Tic Tac Toe\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, status), React.createElement(Board, {\n        handleClick: function handleClick(i) {\n          return _this2.handleClick(i);\n        },\n        squares: current.squares,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(TimeTravel, {\n        moves: moves,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    } // create a function to establish a winner\n    // accepting as argument an array of 9 values describing the board\n\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\Game.js"],"names":["React","Square","TimeTravel","Board","Game","props","declareWinner","squares","lines","i","length","a","b","c","state","history","Array","fill","xNext","index","slice","current","setState","winner","status","moves","map","description","jumpTo","handleClick","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Square, TimeTravel } from './functionalComponents'\r\nimport { Board } from './board'\r\n\r\n\r\n// in the main React component class manage the state of the pplication\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // STATE\r\n        // history contains an array of objects, each with a singe property: _squares_\r\n        // squares is always an array of 9 items, making up the tic-tac-toe grid\r\n        // xNext is a boolean usedd to toggle between x and o\r\n        // index is an integer used to keep track of the current turn (and to allow time-traveling between turns)\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            xNext: true,\r\n            index: 0\r\n        }\r\n    }\r\n\r\n    // create a function used when cligking clicking one of the squares in the grid\r\n    handleClick(i) {\r\n        // retrieve the array of objects from the state, up to the object detailed by the index\r\n        const history = this.state.history.slice(0, this.state.index + 1);\r\n        // retrieve the last object\r\n        const current = history[this.state.index];\r\n        // create a copy of the array contained in the last object\r\n        const squares = [...current.squares];\r\n        // pre-emptively quit the function if a winner can already be declared or the button already matches a non null value\r\n        if (this.declareWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        // alter the value of the respective button including an X or O value\r\n        squares[i] = (this.state.xNext) ? 'X' : 'O';\r\n        // update the state adding the new array to the history property\r\n        // toggle xNext to toggle between the two letters\r\n        // update the index with the length of the now incremented history\r\n        this.setState({\r\n            history: [...history, { squares }],\r\n            xNext: !this.state.xNext,\r\n            index: history.length\r\n        });\r\n    }\r\n\r\n    // create a function to jump to a specific turn\r\n    jumpTo(index) {\r\n        // update the state for the index and for the xNext boolean\r\n        // if index is even (0, 2, 4...) it means xNext ought to be true (as it is the first, third, fifth... action)\r\n        // simply updating this state is enough to trigger a re-render of the components using these values, including the board\r\n        this.setState({\r\n            index,\r\n            xNext: (index % 2) === 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // retrieve the history array and the last item\r\n        const history = this.state.history;\r\n        const current = history[this.state.index];\r\n\r\n        // describe a message based on whether the current array of squares has a winner\r\n        // detail also a circumstance in which all squares have been played and no winner is present\r\n        const winner = this.declareWinner(current.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = `Winning side: ${winner}!`\r\n        } else {\r\n            status = `Player's turn: ${(this.state.xNext) ? 'X' : 'O'}`;\r\n        }\r\n        if (this.state.index === 9 && !winner) {\r\n            status = 'It\\'s a draw';\r\n        }\r\n\r\n        // for the time traveling feature\r\n        // create multiple list items nesting button elements with the jumpTo function\r\n        const moves = history.map((squares, index) => {\r\n            // for each button include a description based on the index (0 returns false)\r\n            // detail the jumpTo function with the appropriate index\r\n            const description = index ? `Go to move #${index}` : `Go to game start`;\r\n            return (\r\n                <li key={index}>\r\n                    <button onClick={() => this.jumpTo(index)}>{description}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        /* return the following hieararchy\r\n          <Header/>\r\n          <Status/>\r\n          <BoardComponent/>\r\n          <TimeTravelComponent/>\r\n        */\r\n        return (\r\n            <div className=\"Game\">\r\n                <h1>Tic Tac Toe</h1>\r\n                <p>{status}</p>\r\n                {/* in the board pass the method to update the state as well as the last array of values */}\r\n                <Board\r\n                    handleClick={(i) => this.handleClick(i)}\r\n                    squares={current.squares}\r\n                />\r\n                {/* in the time travel component pass the series of list items */}\r\n                <TimeTravel moves={moves} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // create a function to establish a winner\r\n    // accepting as argument an array of 9 values describing the board\r\n    declareWinner = (squares) => {\r\n        /* create an array of all possible winning combinations\r\n            considering the board\r\n    \r\n            0 1 2\r\n            3 4 5\r\n            6 7 8\r\n        */\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n\r\n        // loop through the array of winning combinations\r\n        for (let i = 0; i < lines.length; i += 1) {\r\n            // destructure the indexes from the array of winning combinations\r\n            const [a, b, c] = lines[i];\r\n            // if the values in the squares array are the same (and not null) return the winner, else return null\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}