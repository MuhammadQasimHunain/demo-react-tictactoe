{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\board.js\";\nimport React from 'react';\nimport { Square, TimeTravel } from './functionalComponents';\nexport var Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board() {\n    _classCallCheck(this, Board);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Board).apply(this, arguments));\n  }\n\n  _createClass(Board, [{\n    key: \"render\",\n    // instead of using the following render function, create nine squares by mapping through the received array\n\n    /*\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          handleClick={() => this.props.handleClick(i)}\r\n        />\r\n      );\r\n    }\r\n    */\n    value: function render() {\n      var _this = this;\n\n      // map through the array and create nine squares with the specified value and onClick method\n      var squares = this.props.squares.map(function (square, index) {\n        return React.createElement(Square, {\n          value: square,\n          key: index,\n          handleClick: function handleClick() {\n            return _this.props.handleClick(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        });\n      }); // render a container in which the nine squares are wrapped\n\n      return React.createElement(\"div\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, squares);\n    } // create a function to establish a winner\n    // accepting as argument an array of 9 values describing the board\n\n  }, {\n    key: \"declareWinner\",\n    value: function declareWinner(squares) {\n      /* create an array of all possible winning combinations\r\n      \tconsidering the board\r\n      \n      \t0 1 2\r\n      \t3 4 5\r\n      \t6 7 8\r\n      */\n      var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // loop through the array of winning combinations\n\n      for (var i = 0; i < lines.length; i += 1) {\n        // destructure the indexes from the array of winning combinations\n        var _lines$i = _slicedToArray(lines[i], 3),\n            a = _lines$i[0],\n            b = _lines$i[1],\n            c = _lines$i[2]; // if the values in the squares array are the same (and not null) return the winner, else return null\n\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return Board;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\board.js"],"names":["React","Square","TimeTravel","Board","squares","props","map","square","index","handleClick","lines","i","length","a","b","c","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAkBC,UAAlB,QAAoC,wBAApC;AACA,WAAaC,KAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEE;;AACA;;;;;;;;;;AAHF,6BAcW;AAAA;;AACP;AACA,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAX,CAAmBE,GAAnB,CAAuB,UAACC,MAAD,EAASC,KAAT,EAAmB;AACxD,eACE,oBAAC,MAAD;AACE,UAAA,KAAK,EAAED,MADT;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,WAAW,EAAE;AAAA,mBAAM,KAAI,CAACH,KAAL,CAAWI,WAAX,CAAuBD,KAAvB,CAAN;AAAA,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,OARe,CAAhB,CAFO,CAWP;;AACA,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,OADH,CADF;AAKD,KA/BH,CAkCA;AACA;;AAnCA;AAAA;AAAA,kCAoCcA,OApCd,EAoCuB;AACtB;;;;;;;AAOC,UAAMM,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd,CARqB,CAmBrB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC;AADwC,sCAEtBD,KAAK,CAACC,CAAD,CAFiB;AAAA,YAEjCE,CAFiC;AAAA,YAE9BC,CAF8B;AAAA,YAE3BC,CAF2B,gBAGxC;;;AACA,YAAIX,OAAO,CAACS,CAAD,CAAP,IAAcT,OAAO,CAACS,CAAD,CAAP,KAAeT,OAAO,CAACU,CAAD,CAApC,IAA2CV,OAAO,CAACS,CAAD,CAAP,KAAeT,OAAO,CAACW,CAAD,CAArE,EAA0E;AACxE,iBAAOX,OAAO,CAACS,CAAD,CAAd;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAjED;;AAAA;AAAA,EAA2Bb,KAAK,CAACgB,SAAjC","sourcesContent":["import React from 'react';\r\nimport { Square , TimeTravel } from './functionalComponents'\r\nexport class Board extends React.Component {\r\n\r\n  // instead of using the following render function, create nine squares by mapping through the received array\r\n  /*\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        handleClick={() => this.props.handleClick(i)}\r\n      />\r\n    );\r\n  }\r\n  */\r\n\r\n  render() {\r\n    // map through the array and create nine squares with the specified value and onClick method\r\n    const squares = this.props.squares.map((square, index) => {\r\n      return (\r\n        <Square\r\n          value={square}\r\n          key={index}\r\n          handleClick={() => this.props.handleClick(index)}\r\n        />\r\n      );\r\n    })\r\n    // render a container in which the nine squares are wrapped\r\n    return (\r\n      <div className=\"Board\">\r\n        {squares}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n// create a function to establish a winner\r\n// accepting as argument an array of 9 values describing the board\r\ndeclareWinner(squares) {\r\n\t/* create an array of all possible winning combinations\r\n\t\tconsidering the board\r\n\r\n\t\t0 1 2\r\n\t\t3 4 5\r\n\t\t6 7 8\r\n\t*/\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n  // loop through the array of winning combinations\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    // destructure the indexes from the array of winning combinations\r\n    const [a, b, c] = lines[i];\r\n    // if the values in the squares array are the same (and not null) return the winner, else return null\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}