{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\Game.js\";\nimport React from 'react';\nimport './functionalComponents';\nimport { Board } from './board'; // in the main React component class manage the state of the pplication\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props)); // STATE\n    // history contains an array of objects, each with a singe property: _squares_\n    // squares is always an array of 9 items, making up the tic-tac-toe grid\n    // xNext is a boolean usedd to toggle between x and o\n    // index is an integer used to keep track of the current turn (and to allow time-traveling between turns)\n\n    _this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xNext: true,\n      index: 0\n    };\n    return _this;\n  } // create a function used when cligking clicking one of the squares in the grid\n\n\n  _createClass(Game, [{\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      // retrieve the array of objects from the state, up to the object detailed by the index\n      var history = this.state.history.slice(0, this.state.index + 1); // retrieve the last object\n\n      var current = history[this.state.index]; // create a copy of the array contained in the last object\n\n      var squares = _toConsumableArray(current.squares); // pre-emptively quit the function if a winner can already be declared or the button already matches a non null value\n\n\n      if (declareWinner(squares) || squares[i]) {\n        return;\n      } // alter the value of the respective button including an X or O value\n\n\n      squares[i] = this.state.xNext ? 'X' : 'O'; // update the state adding the new array to the history property\n      // toggle xNext to toggle between the two letters\n      // update the index with the length of the now incremented history\n\n      this.setState({\n        history: _toConsumableArray(history).concat([{\n          squares: squares\n        }]),\n        xNext: !this.state.xNext,\n        index: history.length\n      });\n    } // create a function to jump to a specific turn\n\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo(index) {\n      // update the state for the index and for the xNext boolean\n      // if index is even (0, 2, 4...) it means xNext ought to be true (as it is the first, third, fifth... action)\n      // simply updating this state is enough to trigger a re-render of the components using these values, including the board\n      this.setState({\n        index: index,\n        xNext: index % 2 === 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // retrieve the history array and the last item\n      var history = this.state.history;\n      var current = history[this.state.index]; // describe a message based on whether the current array of squares has a winner\n      // detail also a circumstance in which all squares have been played and no winner is present\n\n      var winner = declareWinner(current.squares);\n      var status;\n\n      if (winner) {\n        status = \"Winning side: \".concat(winner, \"!\");\n      } else {\n        status = \"Player's turn: \".concat(this.state.xNext ? 'X' : 'O');\n      }\n\n      if (this.state.index === 9 && !winner) {\n        status = 'It\\'s a draw';\n      } // for the time traveling feature\n      // create multiple list items nesting button elements with the jumpTo function\n\n\n      var moves = history.map(function (squares, index) {\n        // for each button include a description based on the index (0 returns false)\n        // detail the jumpTo function with the appropriate index\n        var description = index ? \"Go to move #\".concat(index) : \"Go to game start\";\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.jumpTo(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, description));\n      });\n      /* return the following hieararchy\r\n        <Header/>\r\n        <Status/>\r\n        <BoardComponent/>\r\n        <TimeTravelComponent/>\r\n      */\n\n      return React.createElement(\"div\", {\n        className: \"Game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Tic Tac Toe\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, status), React.createElement(Board, {\n        handleClick: function handleClick(i) {\n          return _this2.handleClick(i);\n        },\n        squares: current.squares,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(TimeTravel, {\n        moves: moves,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\Game.js"],"names":["React","Board","Game","props","state","history","squares","Array","fill","xNext","index","i","slice","current","declareWinner","setState","length","winner","status","moves","map","description","jumpTo","handleClick","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {  } from './functionalComponents'\r\nimport { Board } from './board'\r\n\r\n\r\n// in the main React component class manage the state of the pplication\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      // STATE\r\n      // history contains an array of objects, each with a singe property: _squares_\r\n      // squares is always an array of 9 items, making up the tic-tac-toe grid\r\n      // xNext is a boolean usedd to toggle between x and o\r\n      // index is an integer used to keep track of the current turn (and to allow time-traveling between turns)\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null)\r\n          }\r\n        ],\r\n        xNext: true,\r\n        index: 0\r\n      }\r\n    }\r\n  \r\n    // create a function used when cligking clicking one of the squares in the grid\r\n    handleClick(i) {\r\n      // retrieve the array of objects from the state, up to the object detailed by the index\r\n      const history = this.state.history.slice(0, this.state.index + 1);\r\n      // retrieve the last object\r\n      const current = history[this.state.index];\r\n      // create a copy of the array contained in the last object\r\n      const squares = [...current.squares];\r\n      // pre-emptively quit the function if a winner can already be declared or the button already matches a non null value\r\n      if (declareWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      // alter the value of the respective button including an X or O value\r\n      squares[i] = (this.state.xNext) ? 'X' : 'O';\r\n      // update the state adding the new array to the history property\r\n      // toggle xNext to toggle between the two letters\r\n      // update the index with the length of the now incremented history\r\n      this.setState({\r\n        history: [...history, { squares }],\r\n        xNext: !this.state.xNext,\r\n        index: history.length\r\n      });\r\n    }\r\n  \r\n    // create a function to jump to a specific turn\r\n    jumpTo(index) {\r\n      // update the state for the index and for the xNext boolean\r\n      // if index is even (0, 2, 4...) it means xNext ought to be true (as it is the first, third, fifth... action)\r\n      // simply updating this state is enough to trigger a re-render of the components using these values, including the board\r\n      this.setState({\r\n        index,\r\n        xNext: (index % 2) === 0\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      // retrieve the history array and the last item\r\n      const history = this.state.history;\r\n      const current = history[this.state.index];\r\n  \r\n      // describe a message based on whether the current array of squares has a winner\r\n      // detail also a circumstance in which all squares have been played and no winner is present\r\n      const winner = declareWinner(current.squares);\r\n      let status;\r\n      if (winner) {\r\n        status = `Winning side: ${winner}!`\r\n      } else {\r\n        status = `Player's turn: ${(this.state.xNext) ? 'X' : 'O'}`;\r\n      }\r\n      if (this.state.index === 9 && !winner) {\r\n        status = 'It\\'s a draw';\r\n      }\r\n  \r\n      // for the time traveling feature\r\n      // create multiple list items nesting button elements with the jumpTo function\r\n      const moves = history.map((squares, index) => {\r\n        // for each button include a description based on the index (0 returns false)\r\n        // detail the jumpTo function with the appropriate index\r\n        const description = index ? `Go to move #${index}` : `Go to game start`;\r\n        return (\r\n          <li key={index}>\r\n            <button onClick={() => this.jumpTo(index)}>{description}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      /* return the following hieararchy\r\n        <Header/>\r\n        <Status/>\r\n        <BoardComponent/>\r\n        <TimeTravelComponent/>\r\n      */\r\n      return (\r\n        <div className=\"Game\">\r\n          <h1>Tic Tac Toe</h1>\r\n          <p>{status}</p>\r\n          {/* in the board pass the method to update the state as well as the last array of values */}\r\n          <Board\r\n            handleClick={(i) => this.handleClick(i)}\r\n            squares={current.squares}\r\n          />\r\n          {/* in the time travel component pass the series of list items */}\r\n          <TimeTravel moves={moves} />\r\n        </div>\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}