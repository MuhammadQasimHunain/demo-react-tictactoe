{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\game.js\";\nimport React from 'react';\nimport { Tile } from './tile';\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.state = {\n      tiles: ['', '', '', '', '', '', '', '', ''],\n      turn: 0,\n      winner: ''\n    };\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"InitialState\",\n    value: function InitialState() {\n      this.setState({\n        tiles: ['', '', '', '', '', '', '', '', ''],\n        turn: 0,\n        winner: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, this.state.tiles.map(function (turn, tile, pos) {\n        var functional = playFN;\n        return React.createElement(Tile, {\n          turn: turn,\n          pmark: tile,\n          onClick: functional,\n          cid: pos,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      }), React.createElement(\"div\", {\n        className: this.state.winner === '' ? 'winstatus' : 'winstatus visible',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Player \", this.state.turn + 1, \" Won\"), React.createElement(\"button\", {\n        onClick: this.restartGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Reset\"))));\n    }\n  }, {\n    key: \"playFN\",\n    value: function playFN(element) {\n      var pos;\n      var pTiles = this.state.tiles;\n\n      if (this.state.tiles[pos] === '') {\n        this.state.tiles[pos] = this.state.turn.toString();\n      } //Checkl if the user has made perfect combination\n\n\n      if (this.check(pTiles[0], pTiles[1], pTiles[2]) || this.check(pTiles[0], pTiles[3], pTiles[6]) || this.check(pTiles[1], pTiles[4], pTiles[7]) || this.check(pTiles[2], pTiles[5], pTiles[8]) || this.check(pTiles[3], pTiles[4], pTiles[5]) || this.check(pTiles[6], pTiles[7], pTiles[8]) || this.check(pTiles[2], pTiles[4], pTiles[6]) || this.check(pTiles[0], pTiles[4], pTiles[9])) {\n        this.setState(this.state.turn = this.state.turn, this.state.winner = this.state.turn.toString());\n      } else {\n        var TurnToPass = 1 - this.state.turn; // this.setState({\n        //     turn = TurnToPass\n        // })\n\n        this.setState(this.state.turn = this.state.turn, this.state.winner = this.state.turn.toString());\n      }\n    }\n  }, {\n    key: \"check\",\n    value: function check(a, b, c) {\n      return !!(a + b + c).match(/^(000|111)&/gi);\n    }\n  }, {\n    key: \"restartGame\",\n    value: function restartGame() {\n      this.InitialState();\n    }\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\game.js"],"names":["React","Tile","Game","props","state","tiles","turn","winner","setState","map","tile","pos","functional","playFN","restartGame","element","pTiles","toString","check","TurnToPass","a","b","c","match","InitialState","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Tile} from './tile'\r\nexport class Game extends React.Component\r\n{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tiles : ['', '', '', '', '', '', '', '', '' ],\r\n            turn: 0,\r\n            winner:''\r\n        };\r\n    }\r\n    InitialState()\r\n    {\r\n        this.setState({\r\n            tiles : ['', '', '', '', '', '', '', '', '' ],\r\n            turn: 0,\r\n            winner:''\r\n        });\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className='game'>\r\n                {\r\n                    this.state.tiles.map(function(turn,tile,pos) {\r\n                        const functional = playFN;\r\n                        return (\r\n                            <Tile turn={turn} pmark={tile} onClick={functional} cid={pos}></Tile>\r\n                        )\r\n                    })\r\n                    \r\n                }\r\n                <div className={this.state.winner === ''? 'winstatus' : 'winstatus visible'}>\r\n                    <div>\r\n                        <p>\r\n                           Player {this.state.turn + 1} Won \r\n                        </p>\r\n                        <button onClick={this.restartGame}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    playFN(element)\r\n    {\r\n        let pos : element.target.id;\r\n        let pTiles = this.state.tiles;\r\n        if(this.state.tiles[pos] === '')\r\n        {\r\n            this.state.tiles[pos] = (this.state.turn).toString();\r\n        }\r\n        //Checkl if the user has made perfect combination\r\n        if(this.check(pTiles[0],pTiles[1],pTiles[2]) ||\r\n        this.check(pTiles[0],pTiles[3],pTiles[6]) ||\r\n        this.check(pTiles[1],pTiles[4],pTiles[7]) ||\r\n        this.check(pTiles[2],pTiles[5],pTiles[8]) ||\r\n        this.check(pTiles[3],pTiles[4],pTiles[5]) ||\r\n        this.check(pTiles[6],pTiles[7],pTiles[8]) ||\r\n        this.check(pTiles[2],pTiles[4],pTiles[6]) ||\r\n        this.check(pTiles[0],pTiles[4],pTiles[9])\r\n        )\r\n        {\r\n            this.setState(\r\n                this.state.turn= this.state.turn,\r\n                this.state.winner = this.state.turn.toString()\r\n                );\r\n        }\r\n        else \r\n        {\r\n            let TurnToPass = 1 - this.state.turn;\r\n            // this.setState({\r\n            //     turn = TurnToPass\r\n            // })\r\n            this.setState(\r\n                this.state.turn= this.state.turn,\r\n                this.state.winner = this.state.turn.toString()\r\n                );\r\n        }\r\n    }\r\n    check(a,b,c)\r\n    {\r\n        return !!(a+b+c).match(/^(000|111)&/gi);\r\n    }\r\n    restartGame()\r\n    {\r\n        this.InitialState();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}