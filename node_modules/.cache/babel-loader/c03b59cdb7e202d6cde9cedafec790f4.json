{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\Game.js\";\nimport React from 'react';\nimport { INIT_STATE, ChoosePlayer, GameInfo } from './functionalComponents';\nimport { Board } from './board';\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n\n    _this.emptyIndexies = function (squares) {\n      return squares.reduce(function (acc, val, idx) {\n        if (!val) {\n          acc.push(idx);\n        }\n\n        return acc;\n      }, []);\n    };\n\n    _this.calculateWinner = function (squares) {\n      var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n      for (var i = 0; i < lines.length; i++) {\n        var _lines$i = _slicedToArray(lines[i], 3),\n            a = _lines$i[0],\n            b = _lines$i[1],\n            c = _lines$i[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n\n      return null;\n    };\n\n    _this.isWinner = function (squares, player) {\n      return _this.calculateWinner(squares) === player;\n    };\n\n    _this.calcMinimax = function (squares, playerToHelp, human, computer) {\n      function calcScores(squares, availSpots, depth) {\n        if (this.isWinner(squares, computer)) {\n          // player\n          // computer would win\n          if (computer === playerToHelp) {\n            return 10 - depth;\n          } else {\n            return depth - 10;\n          }\n        } else if (this.isWinner(squares, human)) {\n          // opponent\n          // human would win\n          if (human === playerToHelp) {\n            return 10 - depth;\n          } else {\n            return depth - 10;\n          }\n        } else if (availSpots.length === 0) {\n          // no more moves available, it is a draw\n          return 0;\n        }\n\n        return null;\n      }\n\n      var res = _this.minimax(squares, playerToHelp, 0);\n\n      return res;\n    };\n\n    _this.state = INIT_STATE;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"jumpTo\",\n    value: function jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        playerIsNext: step % 2 ? false : true,\n        winner: null\n      });\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame(player) {\n      this.setState(_objectSpread({}, INIT_STATE, {\n        player: player\n      }));\n    }\n  }, {\n    key: \"setPlayer\",\n    value: function setPlayer(player) {\n      this.setState({\n        player: player\n      });\n    }\n  }, {\n    key: \"setMove\",\n    value: function setMove(i) {\n      var _this$state = this.state,\n          stepNumber = _this$state.stepNumber,\n          player = _this$state.player,\n          playerIsNext = _this$state.playerIsNext,\n          winner = _this$state.winner;\n      var history = this.state.history.slice(0, stepNumber + 1);\n      var current = history[history.length - 1];\n      var squares = current.squares.slice();\n\n      if (winner || squares[i]) {\n        return;\n      }\n\n      var opponent = player === 'X' ? 'O' : 'X';\n      squares[i] = playerIsNext ? player : opponent;\n      var hasEmptyIndex = squares.some(function (s) {\n        return s != \"O\" && s != \"X\";\n      }); // was there a winner or an even?\n\n      var nextWinner = this.calculateWinner(squares);\n\n      if (!nextWinner && !hasEmptyIndex) {\n        nextWinner = \"-\";\n      }\n\n      this.setState({\n        history: history.concat([{\n          squares: squares\n        }]),\n        stepNumber: history.length,\n        playerIsNext: !playerIsNext,\n        winner: nextWinner\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var _this$state2 = this.state,\n          playerIsNext = _this$state2.playerIsNext,\n          winner = _this$state2.winner;\n\n      if (playerIsNext && !winner) {\n        this.setMove(i);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          history = _this$state3.history,\n          stepNumber = _this$state3.stepNumber,\n          playerIsNext = _this$state3.playerIsNext,\n          player = _this$state3.player,\n          winner = _this$state3.winner;\n      var current = history[stepNumber];\n\n      if (winner) {\n        // there was a winner, reset the game\n        // or no more moves! game over!\n        // restart game anyway\n        setTimeout(function () {\n          _this2.resetGame(player);\n        }, 2000);\n      } else if (!playerIsNext) {\n        // now the computer has to play in a sec\n        var emptyIndex = 0;\n        var hasEmptyIndex = current.squares.some(function (s, idx) {\n          if (s != \"O\" && s != \"X\") {\n            emptyIndex = idx;\n            return true;\n          }\n\n          ;\n        });\n\n        if (!hasEmptyIndex) {\n          // no more moves! game over!\n          console.log('kind of error, no more moves! game over!');\n        } else {\n          // computer's move in 2 secs\n          var computer = player === \"X\" ? \"O\" : \"X\";\n          var bestMove = this.calcMinimax(current.squares, computer, player, computer);\n          setTimeout(function () {\n            _this2.setMove(bestMove);\n          }, 500);\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Tic Tac Toe\"), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"A React Game, not unbeatable\"))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(ChoosePlayer, {\n        player: player,\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this2.setPlayer(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Board, {\n        player: player,\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(GameInfo, {\n        stepNumber: stepNumber,\n        player: player,\n        playerIsNext: playerIsNext,\n        history: history,\n        winner: winner,\n        onClick: function onClick(move) {\n          return _this2.jumpTo(move);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })));\n    } // returns list of the indexes of empty spots on the board\n\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\Game.js"],"names":["React","INIT_STATE","ChoosePlayer","GameInfo","Board","Game","emptyIndexies","squares","reduce","acc","val","idx","push","calculateWinner","lines","i","length","a","b","c","isWinner","player","calcMinimax","playerToHelp","human","computer","calcScores","availSpots","depth","res","minimax","state","step","setState","stepNumber","playerIsNext","winner","history","slice","current","opponent","hasEmptyIndex","some","s","nextWinner","concat","setMove","setTimeout","resetGame","emptyIndex","console","log","bestMove","setPlayer","handleClick","move","jumpTo","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { INIT_STATE, ChoosePlayer, GameInfo } from './functionalComponents'\r\nimport { Board } from './board'\r\nexport class Game extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = INIT_STATE;\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            playerIsNext: (step % 2) ? false : true,\r\n            winner: null,\r\n        });\r\n    }\r\n\r\n    resetGame(player) {\r\n        this.setState({ ...INIT_STATE, player: player });\r\n    }\r\n\r\n    setPlayer(player) {\r\n        this.setState({\r\n            player: player,\r\n        });\r\n    }\r\n\r\n    setMove(i) {\r\n        const { stepNumber,\r\n            player,\r\n            playerIsNext,\r\n            winner\r\n        } = this.state;\r\n\r\n        const history = this.state.history.slice(0, stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        const opponent = (player === 'X') ? 'O' : 'X';\r\n        squares[i] = playerIsNext ? player : opponent;\r\n\r\n        const hasEmptyIndex = squares.some((s) => { return (s != \"O\" && s != \"X\") });\r\n\r\n        // was there a winner or an even?\r\n\r\n        let nextWinner = this.calculateWinner(squares);\r\n\r\n        if (!nextWinner && !hasEmptyIndex) {\r\n            nextWinner = \"-\";\r\n        }\r\n\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            playerIsNext: !playerIsNext,\r\n            winner: nextWinner,\r\n        });\r\n\r\n    }\r\n\r\n    handleClick(i) {\r\n        const {\r\n            playerIsNext,\r\n            winner\r\n        } = this.state;\r\n\r\n        if (playerIsNext && !winner) {\r\n            this.setMove(i);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            history,\r\n            stepNumber,\r\n            playerIsNext,\r\n            player,\r\n            winner\r\n        } = this.state;\r\n\r\n        const current = history[stepNumber];\r\n\r\n        if (winner) {\r\n            // there was a winner, reset the game\r\n            // or no more moves! game over!\r\n            // restart game anyway\r\n            setTimeout(() => { this.resetGame(player) }, 2000);\r\n        } else if (!playerIsNext) {\r\n\r\n            // now the computer has to play in a sec\r\n            let emptyIndex = 0;\r\n            const hasEmptyIndex = current.squares.some((s, idx) => {\r\n                if (s != \"O\" && s != \"X\") {\r\n                    emptyIndex = idx;\r\n                    return true;\r\n                };\r\n            });\r\n            if (!hasEmptyIndex) {\r\n                // no more moves! game over!\r\n                console.log('kind of error, no more moves! game over!');\r\n            } else {\r\n                // computer's move in 2 secs\r\n                const computer = player === \"X\" ? \"O\" : \"X\";\r\n                const bestMove = this.calcMinimax(current.squares, computer, player, computer);\r\n\r\n                setTimeout(() => { this.setMove(bestMove) }, 500);\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"game-title\">\r\n                        <h3>Tic Tac Toe\r\n            </h3>\r\n                        <small>A React Game, not unbeatable</small>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <ChoosePlayer\r\n                        player={player}\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.setPlayer(i)}\r\n                    />\r\n                    <Board\r\n                        player={player}\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"row\">\r\n                    <GameInfo\r\n                        stepNumber={stepNumber}\r\n                        player={player}\r\n                        playerIsNext={playerIsNext}\r\n                        history={history}\r\n                        winner={winner}\r\n                        onClick={(move) => this.jumpTo(move)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // returns list of the indexes of empty spots on the board\r\n    emptyIndexies = (squares) => {\r\n        return squares.reduce((acc, val, idx) => {\r\n            if (!val) {\r\n                acc.push(idx);\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    isWinner = (squares, player) => {\r\n        return this.calculateWinner(squares) === player;\r\n    }\r\n\r\n    calcMinimax = (squares, playerToHelp, human, computer) => {\r\n\r\n        function calcScores(squares, availSpots, depth) {\r\n\r\n            if (this.isWinner(squares, computer)) { // player\r\n                // computer would win\r\n                if (computer === playerToHelp) {\r\n                    return 10 - depth;\r\n                } else {\r\n                    return depth - 10;\r\n                }\r\n            } else if (this.isWinner(squares, human)) { // opponent\r\n                // human would win\r\n                if (human === playerToHelp) {\r\n                    return 10 - depth;\r\n                } else {\r\n                    return depth - 10;\r\n                }\r\n            } else if (availSpots.length === 0) {\r\n                // no more moves available, it is a draw\r\n                return 0;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n\r\n        const res = this.minimax(squares, playerToHelp, 0);\r\n        return res;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}