{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\qhunain\\\\Documents\\\\demo\\\\my-app\\\\src\\\\components\\\\gameComponents\\\\Game.js\";\nimport React from 'react';\nimport { INIT_STATE } from './functionalComponents';\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n\n    _this.emptyIndexies = function (squares) {\n      return squares.reduce(function (acc, val, idx) {\n        if (!val) {\n          acc.push(idx);\n        }\n\n        return acc;\n      }, []);\n    };\n\n    _this.calculateWinner = function (squares) {\n      var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n      for (var i = 0; i < lines.length; i++) {\n        var _lines$i = _slicedToArray(lines[i], 3),\n            a = _lines$i[0],\n            b = _lines$i[1],\n            c = _lines$i[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n\n      return null;\n    };\n\n    _this.isWinner = function (squares, player) {\n      return calculateWinner(squares) === player;\n    };\n\n    _this.calcMinimax = function (squares, playerToHelp, human, computer) {\n      function calcScores(squares, availSpots, depth) {\n        if (isWinner(squares, computer)) {\n          // player\n          // computer would win\n          if (computer === playerToHelp) {\n            return 10 - depth;\n          } else {\n            return depth - 10;\n          }\n        } else if (isWinner(squares, human)) {\n          // opponent\n          // human would win\n          if (human === playerToHelp) {\n            return 10 - depth;\n          } else {\n            return depth - 10;\n          }\n        } else if (availSpots.length === 0) {\n          // no more moves available, it is a draw\n          return 0;\n        }\n\n        return null;\n      } // the main minimax function\n\n\n      function minimax(squares, player, depth) {\n        // available spots\n        var availSpots = emptyIndexies(squares); //\n\n        var result = calcScores(squares, availSpots, depth);\n\n        if (result) {\n          return result; // terminate\n        }\n\n        var scores = []; // loop through available spots\n        // fill moves and scores\n\n        var moves = availSpots.map(function (val, idx) {\n          var nextPlayer = player === human ? computer : human; //move to test with current player\n\n          squares[val] = player; // e.g. set \"X\" at the idx place\n          //recursive with depth+1\n\n          var score = minimax(squares, nextPlayer, depth + 1);\n          scores.push(score); //reverse move\n\n          squares[val] = null;\n          return val; // moves.push move\n        });\n        var scoreIndex = 0;\n\n        if (player === playerToHelp) {\n          // playerToHelp has to maximize its points: max calc\n          scoreIndex = scores.reduce(function (iMax, x, i, arr) {\n            return x > arr[iMax] ? i : iMax;\n          }, 0);\n        } else {\n          // opponents wants to minimize playerToHelp points: min calc\n          scoreIndex = scores.reduce(function (iMin, x, i, arr) {\n            return x < arr[iMin] ? i : iMin;\n          }, 0);\n        }\n\n        if (depth === 0) {\n          return moves[scoreIndex]; // best move\n        }\n\n        return scores[scoreIndex];\n      }\n\n      var res = minimax(squares, playerToHelp, 0);\n      return res;\n    };\n\n    _this.state = INIT_STATE;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"jumpTo\",\n    value: function jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        playerIsNext: step % 2 ? false : true,\n        winner: null\n      });\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame(player) {\n      this.setState(_objectSpread({}, INIT_STATE, {\n        player: player\n      }));\n    }\n  }, {\n    key: \"setPlayer\",\n    value: function setPlayer(player) {\n      this.setState({\n        player: player\n      });\n    }\n  }, {\n    key: \"setMove\",\n    value: function setMove(i) {\n      var _this$state = this.state,\n          stepNumber = _this$state.stepNumber,\n          player = _this$state.player,\n          playerIsNext = _this$state.playerIsNext,\n          winner = _this$state.winner;\n      var history = this.state.history.slice(0, stepNumber + 1);\n      var current = history[history.length - 1];\n      var squares = current.squares.slice();\n\n      if (winner || squares[i]) {\n        return;\n      }\n\n      var opponent = player === 'X' ? 'O' : 'X';\n      squares[i] = playerIsNext ? player : opponent;\n      var hasEmptyIndex = squares.some(function (s) {\n        return s != \"O\" && s != \"X\";\n      }); // was there a winner or an even?\n\n      var nextWinner = calculateWinner(squares);\n\n      if (!nextWinner && !hasEmptyIndex) {\n        nextWinner = \"-\";\n      }\n\n      this.setState({\n        history: history.concat([{\n          squares: squares\n        }]),\n        stepNumber: history.length,\n        playerIsNext: !playerIsNext,\n        winner: nextWinner\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var _this$state2 = this.state,\n          playerIsNext = _this$state2.playerIsNext,\n          winner = _this$state2.winner;\n\n      if (playerIsNext && !winner) {\n        this.setMove(i);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          history = _this$state3.history,\n          stepNumber = _this$state3.stepNumber,\n          playerIsNext = _this$state3.playerIsNext,\n          player = _this$state3.player,\n          winner = _this$state3.winner;\n      var current = history[stepNumber];\n\n      if (winner) {\n        // there was a winner, reset the game\n        // or no more moves! game over!\n        // restart game anyway\n        setTimeout(function () {\n          _this2.resetGame(player);\n        }, 2000);\n      } else if (!playerIsNext) {\n        // now the computer has to play in a sec\n        var emptyIndex = 0;\n        var hasEmptyIndex = current.squares.some(function (s, idx) {\n          if (s != \"O\" && s != \"X\") {\n            emptyIndex = idx;\n            return true;\n          }\n\n          ;\n        });\n\n        if (!hasEmptyIndex) {\n          // no more moves! game over!\n          console.log('kind of error, no more moves! game over!');\n        } else {\n          // computer's move in 2 secs\n          var computer = player === \"X\" ? \"O\" : \"X\";\n          var bestMove = calcMinimax(current.squares, computer, player, computer);\n          setTimeout(function () {\n            _this2.setMove(bestMove);\n          }, 500);\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Tic Tac Toe\"), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"A React Game, not unbeatable\"))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(ChoosePlayer, {\n        player: player,\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this2.setPlayer(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Board, {\n        player: player,\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(GameInfo, {\n        stepNumber: stepNumber,\n        player: player,\n        playerIsNext: playerIsNext,\n        history: history,\n        winner: winner,\n        onClick: function onClick(move) {\n          return _this2.jumpTo(move);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })));\n    } // returns list of the indexes of empty spots on the board\n\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\qhunain\\Documents\\demo\\my-app\\src\\components\\gameComponents\\Game.js"],"names":["React","INIT_STATE","Game","emptyIndexies","squares","reduce","acc","val","idx","push","calculateWinner","lines","i","length","a","b","c","isWinner","player","calcMinimax","playerToHelp","human","computer","calcScores","availSpots","depth","minimax","result","scores","moves","map","nextPlayer","score","scoreIndex","iMax","x","arr","iMin","res","state","step","setState","stepNumber","playerIsNext","winner","history","slice","current","opponent","hasEmptyIndex","some","s","nextWinner","concat","setMove","setTimeout","resetGame","emptyIndex","console","log","bestMove","setPlayer","handleClick","move","jumpTo","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { INIT_STATE} from './functionalComponents'\r\nexport class Game extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = INIT_STATE;\r\n    }\r\n   \r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        playerIsNext: (step % 2) ? false : true,\r\n        winner: null,\r\n      });\r\n    }\r\n    \r\n    resetGame(player) {\r\n      this.setState({ ...INIT_STATE, player: player });\r\n    }\r\n  \r\n    setPlayer(player) {\r\n      this.setState({\r\n        player: player,\r\n      });\r\n    }\r\n    \r\n    setMove(i) {\r\n      const { stepNumber, \r\n             player, \r\n             playerIsNext,\r\n             winner\r\n      } = this.state;\r\n      \r\n      const history = this.state.history.slice(0, stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n  \r\n      if (winner || squares[i]) {\r\n        return;\r\n      }\r\n      \r\n      const opponent = (player === 'X') ? 'O' : 'X';\r\n      squares[i] = playerIsNext ? player : opponent;\r\n  \r\n      const hasEmptyIndex = squares.some( (s) => { return (s != \"O\" && s != \"X\") } );\r\n      \r\n      // was there a winner or an even?\r\n      let nextWinner = calculateWinner(squares);\r\n      \r\n      if (!nextWinner && !hasEmptyIndex) {\r\n        nextWinner = \"-\";\r\n      }\r\n      \r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares\r\n        }]),\r\n        stepNumber: history.length,\r\n        playerIsNext: !playerIsNext,\r\n        winner: nextWinner,\r\n      });\r\n      \r\n    }\r\n    \r\n    handleClick(i) {\r\n      const { \r\n        playerIsNext,\r\n        winner\r\n      } = this.state;\r\n  \r\n      if (playerIsNext && !winner) {\r\n        this.setMove(i);\r\n      }\r\n      \r\n    }\r\n      \r\n    render() {\r\n      const { \r\n        history, \r\n        stepNumber,\r\n        playerIsNext,\r\n        player,\r\n        winner\r\n      } = this.state;\r\n  \r\n      const current = history[stepNumber];  \r\n      \r\n      if (winner) {\r\n        // there was a winner, reset the game\r\n        // or no more moves! game over!\r\n        // restart game anyway\r\n        setTimeout(() => {this.resetGame(player)}, 2000);      \r\n      } else if (!playerIsNext) {\r\n        \r\n        // now the computer has to play in a sec\r\n        let emptyIndex = 0;\r\n        const hasEmptyIndex = current.squares.some( (s,idx) => {\r\n          if (s != \"O\" && s != \"X\") { \r\n            emptyIndex = idx; \r\n            return true;\r\n          };\r\n        } );\r\n        if (!hasEmptyIndex) {\r\n          // no more moves! game over!\r\n          console.log('kind of error, no more moves! game over!');\r\n        } else {\r\n          // computer's move in 2 secs\r\n          const computer = player===\"X\"?\"O\":\"X\";\r\n          const bestMove = calcMinimax(current.squares, computer, player, computer);\r\n  \r\n          setTimeout(() => {this.setMove(bestMove)}, 500);  \r\n        }\r\n        \r\n      }\r\n      \r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"game-title\">\r\n            <h3>Tic Tac Toe\r\n            </h3>\r\n              <small>A React Game, not unbeatable</small>\r\n          </div>\r\n          </div>\r\n          <div className=\"row\">\r\n              <ChoosePlayer \r\n                player={player}\r\n                squares={current.squares}\r\n                onClick={(i) => this.setPlayer(i)}\r\n              />\r\n              <Board \r\n                player={player}\r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n              />\r\n  \r\n          </div>\r\n          <div className=\"row\">\r\n              <GameInfo\r\n                stepNumber={stepNumber}\r\n                player={player}\r\n                playerIsNext={playerIsNext}\r\n                history={history}\r\n                winner={winner}\r\n                onClick={(move) => this.jumpTo(move)}\r\n                />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n// returns list of the indexes of empty spots on the board\r\n    emptyIndexies = (squares) =>{\r\n    return  squares.reduce( (acc, val, idx) => {\r\n          if (!val) {\r\n              acc.push(idx);\r\n          }\r\n          return acc;\r\n      }, [] );\r\n  }\r\n  \r\n  calculateWinner =( squares)  => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  isWinner = (squares, player)  => {\r\n      return calculateWinner(squares) === player;\r\n  }\r\n  \r\n  calcMinimax = (squares, playerToHelp, human, computer)  => {\r\n  \r\n      function calcScores(squares, availSpots, depth) {\r\n  \r\n          if (isWinner(squares, computer)) { // player\r\n              // computer would win\r\n              if (computer === playerToHelp) {\r\n                  return 10 - depth;\t\t\t\r\n              } else {\r\n                  return depth - 10;\r\n              }\r\n          } else if (isWinner(squares, human)) { // opponent\r\n              // human would win\r\n              if (human === playerToHelp) {\r\n                  return 10 - depth;\t\t\t\r\n              } else {\r\n                  return depth - 10;\r\n              }\r\n          } else if (availSpots.length === 0) {\r\n              // no more moves available, it is a draw\r\n              return 0;\r\n          } \r\n          \r\n          return null;\r\n      }\r\n  \r\n    // the main minimax function\r\n      function minimax(squares, player, depth) {\r\n  \r\n      // available spots\r\n          const availSpots = emptyIndexies(squares);\r\n  \r\n          //\r\n          const result = calcScores(squares, availSpots, depth);\r\n  \r\n          if (result) {\r\n              return result; // terminate\r\n          }\r\n  \r\n          const scores = [];\r\n          // loop through available spots\r\n          // fill moves and scores\r\n          const moves = availSpots.map((val, idx) => {\r\n  \r\n        const nextPlayer = (player === human) ? computer : human;\r\n              \r\n              //move to test with current player\r\n              squares[val] = player; // e.g. set \"X\" at the idx place\r\n              //recursive with depth+1\r\n                          \r\n              const score = minimax(squares, nextPlayer, depth + 1);\r\n              scores.push(score);\r\n              //reverse move\r\n              squares[val] = null;\t\t\t\r\n              return val; // moves.push move\r\n          });\r\n          \r\n          let scoreIndex = 0;\r\n          if (player === playerToHelp) {\r\n              // playerToHelp has to maximize its points: max calc\r\n              scoreIndex = scores.reduce(\r\n                  (iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n          } else {\r\n              // opponents wants to minimize playerToHelp points: min calc\r\n              scoreIndex = scores.reduce(\r\n                  (iMin, x, i, arr) => x < arr[iMin] ? i : iMin, 0);\t\t\t\r\n          }\r\n          \r\n          if (depth === 0) {\r\n              return moves[scoreIndex]; // best move\r\n          }\r\n          return scores[scoreIndex];\r\n      }\r\n      \r\n      const res = minimax(squares, playerToHelp, 0);\r\n      return res;\r\n  }\r\n  \r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}